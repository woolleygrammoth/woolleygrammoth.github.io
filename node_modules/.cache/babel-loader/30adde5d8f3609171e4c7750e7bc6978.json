{"ast":null,"code":"/**\n * @fileoverview Extend node util module\n * @author douzi <liaowei08@gmail.com> \n */\nvar util = require('util');\n\nvar toString = Object.prototype.toString;\nvar isWindows = process.platform === 'win32';\n\nfunction isObject(value) {\n  return toString.call(value) === '[object Object]';\n} // And type check method: isFunction, isString, isNumber, isDate, isRegExp, isObject\n\n\n['Function', 'String', 'Number', 'Date', 'RegExp'].forEach(function (item) {\n  exports['is' + item] = function (value) {\n    return toString.call(value) === '[object ' + item + ']';\n  };\n});\n/**\n * @description\n * Deep extend\n * @example\n * extend({ key: { k1: 'v1'} }, { key: { k2: 'v2' }, none: { k: 'v' } });\n * extend({ arr: [] }, { arr: [ {}, {} ] });\n */\n\nfunction extend(target, source) {\n  var value;\n\n  for (var key in source) {\n    value = source[key];\n\n    if (Array.isArray(value)) {\n      if (!Array.isArray(target[key])) {\n        target[key] = [];\n      }\n\n      extend(target[key], value);\n    } else if (isObject(value)) {\n      if (!isObject(target[key])) {\n        target[key] = {};\n      }\n\n      extend(target[key], value);\n    } else {\n      target[key] = value;\n    }\n  }\n\n  return target;\n}\n\nextend(exports, util); // fixed util.isObject \n\nexports.isObject = isObject;\n\nexports.extend = function () {\n  var args = Array.prototype.slice.call(arguments, 0);\n  var target = args.shift();\n  args.forEach(function (item) {\n    extend(target, item);\n  });\n  return target;\n};\n\nexports.isArray = Array.isArray;\n\nexports.isUndefined = function (value) {\n  return typeof value == 'undefined';\n};\n\nexports.noop = function () {};\n\nexports.unique = function (array) {\n  var result = [];\n  array.forEach(function (item) {\n    if (result.indexOf(item) == -1) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\nexports.escape = function (value) {\n  return String(value).replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n};\n\nexports.unescape = function (value) {\n  return String(value).replace(/&amp;/g, '&').replace(/&quot;/g, '\"').replace(/&#39;/g, \"'\").replace(/&lt;/g, '<').replace(/&gt;/g, '>');\n};\n\nexports.hrtime = function (time) {\n  if (time) {\n    var spend = process.hrtime(time);\n    spend = (spend[0] + spend[1] / 1e9) * 1000 + 'ms';\n    return spend;\n  } else {\n    return process.hrtime();\n  }\n};\n/**\n * @description\n * Return a copy of the object with list keys\n * @example\n * util.pick({ key: 'value' }, 'key', 'key1');\n * util.pick(obj, function(value, key, object) { });\n */\n\n\nexports.pick = function (obj, iteratee) {\n  var result = {};\n\n  if (exports.isFunction(iteratee)) {\n    for (var key in obj) {\n      var value = obj[key];\n\n      if (iteratee(value, key, obj)) {\n        result[key] = value;\n      }\n    }\n  } else {\n    var keys = Array.prototype.slice.call(arguments, 1);\n    keys.forEach(function (key) {\n      if (key in obj) {\n        result[key] = obj[key];\n      }\n    });\n  }\n\n  return result;\n};\n\nexports.path = {};\n\nif (isWindows) {\n  // Regex to split a windows path into three parts: [*, device, slash,\n  // tail] windows-only\n  var splitDeviceRe = /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\n\n  exports.path.isAbsolute = function (filepath) {\n    var result = splitDeviceRe.exec(filepath),\n        device = result[1] || '',\n        isUnc = !!device && device.charAt(1) !== ':'; // UNC paths are always absolute\n\n    return !!result[2] || isUnc;\n  }; // Normalize \\\\ paths to / paths.\n\n\n  exports.path.unixifyPath = function (filepath) {\n    return filepath.replace(/\\\\/g, '/');\n  };\n} else {\n  exports.path.isAbsolute = function (filepath) {\n    return filepath.charAt(0) === '/';\n  };\n\n  exports.path.unixifyPath = function (filepath) {\n    return filepath;\n  };\n}","map":null,"metadata":{},"sourceType":"script"}